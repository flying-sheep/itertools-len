name: CI

on:
  push:
    branches:
      - main
      - "[0-9]+.[0-9]+.x"
  pull_request:

env:
  FORCE_COLOR: "1"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  get-environments:
    runs-on: ubuntu-latest
    outputs:
      envs: ${{ steps.get-envs.outputs.envs }}
    steps:
      - uses: actions/checkout@v5
        with:
          filter: blob:none
          fetch-depth: 0
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
      - id: get-envs
        run: |
          ENVS_JSON=$(NO_COLOR=1 uvx hatch env show --json | jq -c 'to_entries
            | map(
              select(.key | startswith("hatch-test"))
              | { name: .key, python: .value.python }
            )')
          echo "envs=${ENVS_JSON}" | tee $GITHUB_OUTPUT
  test:
    needs: get-environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJSON(needs.get-environments.outputs.envs) }}
    env:  # environment variable for use in codecovâ€™s env_vars tagging
      ENV_NAME: ${{ matrix.env.name }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          filter: blob:none

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uvx hatch -v env create ${{ matrix.env.name }}

      - name: Run tests
        run: uvx hatch run ${{ matrix.env.name }}:run-cov -v --color=yes -n auto --cov --cov-report=xml --junitxml=test-results.xml

      - name: Upload coverage data
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: ENV_NAME
          fail_ci_if_error: true

      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: ENV_NAME
          fail_ci_if_error: true
          file: test-results.xml

  check:
    if: always()
    needs:
      - get-environments
      - test
    runs-on: ubuntu-latest
    steps:
        - uses: re-actors/alls-green@release/v1
          with:
            jobs: ${{ toJSON(needs) }}
